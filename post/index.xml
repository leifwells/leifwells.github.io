<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leif&#39;s Development Blog-o-rama </title>
    <link>https://leifwells.github.io/post/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2017</rights>
    <updated>2017-08-27 16:24:28 -0400 EDT</updated>

    
      
        <item>
          <title>Testing in Ionic: Configure Existing Projects for Testing</title>
          <link>https://leifwells.github.io/2017/08/27/testing-in-ionic-configure-existing-projects-for-testing/</link>
          <pubDate>Sun, 27 Aug 2017 16:24:28 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2017/08/27/testing-in-ionic-configure-existing-projects-for-testing/</guid>
          <description>

&lt;p&gt;So, you have an existing &lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; project and now you want to start unit testing and end-to-end testing it. A great way to configure your existing project for testing is use the &lt;a href=&#34;https://github.com/ionic-team/ionic-unit-testing-example&#34;&gt;&lt;code&gt;ionic-unit-testing-example&lt;/code&gt;&lt;/a&gt; project on Github. This post will provide you with step-by-step instructions on how to add modules and files from that project into your own project so you may begin testing your project.&lt;/p&gt;

&lt;p&gt;While the name of the project is &lt;code&gt;ionic-unit-testing-example&lt;/code&gt;, the project actually sets up two kinds of testing: unit testing and end-to-end (E2E) testing. For the purposes of this tutorial, unit testing is isolating components for testing, and end-to-end testing automates the browser and simulates user interactivity to allow the testing of how the whole application works.&lt;/p&gt;

&lt;p&gt;Testing and Test Driven Development can be controversial topics in some circles. How you go about testing is up to you and your team.  Personally, I believe that you should have both unit tests for your components and E2E tests for your application. How you get there is up to you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Trigger Warning:&lt;/strong&gt; Unit testing and end-to-end testing can be challenging and frustrating even for experienced developers. Getting tests to pass can take patience and experience. You should learn as much as possible about testing before beginning your testing practice. Take your time, ask questions of your peers, seek assistance online, and above all, don&amp;rsquo;t let a continuosly failing test get the better of you. You will overcome it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tutorial was assembled with the following software installed (this information gathered by using the &lt;code&gt;ionic info&lt;/code&gt; command):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ionic info

cli packages: (/Users/leifwells/.nvm/versions/node/v6.11.2/lib/node_modules)

    @ionic/cli-utils  : 1.9.2
    ionic (Ionic CLI) : 3.9.2

local packages:

    @ionic/app-scripts : 2.1.3
    Ionic Framework    : ionic-angular 3.6.0

System:

    Node : v6.11.2
    npm  : 3.10.10 
    OS   : macOS Sierra
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-1-create-a-project-to-test-optional&#34;&gt;Step 1: Create a Project to Test (Optional)&lt;/h2&gt;

&lt;p&gt;Since we do not know anything about your project, so we will be using an Ionic starter project as our starting point. To create it, open up your terminal application, navigate to the folder where you would like to add a new project, and run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ionic start starter-with-testing sidemenu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will create a directory named &lt;code&gt;starter-with-testing&lt;/code&gt; and install the code for an Ionic application using the side menu template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; This step is not necessary if you are adding content to your own project. Since we can&amp;rsquo;t see your project, we needed a point of reference to get these instructions started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, navigate your terminal window to the installed folder and run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd starter-with-testing
ionic serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the application running, you have completed this step.&lt;/p&gt;

&lt;h2 id=&#34;step-2-get-the-example-code&#34;&gt;Step 2: Get the Example Code&lt;/h2&gt;

&lt;p&gt;Head over to &lt;a href=&#34;https://github.com/ionic-team/ionic-unit-testing-example&#34;&gt;&lt;code&gt;ionic-unit-testing-example&lt;/code&gt;&lt;/a&gt; and download the code. You don&amp;rsquo;t need to load or run the project. We&amp;rsquo;ll be moving files and code from that project into our project code.&lt;/p&gt;

&lt;p&gt;You can use the green &amp;ldquo;Clone or download&amp;rdquo; to download a .zip file of the project. Click the button to reveal the &amp;ldquo;Clone with SSH&amp;rdquo; popover and click on the &amp;ldquo;Download ZIP&amp;rdquo; button to begin the process.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://leifwells.github.io/images/2017-08-27_clone_or_download.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Figure 1: The Clone or download popover.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;br /&gt;
Once the file is downloaded, decompress it and open the containing folder so that it is available when we need it.&lt;/p&gt;

&lt;h2 id=&#34;step-3-install-required-node-modules&#34;&gt;Step 3: Install Required Node Modules&lt;/h2&gt;

&lt;p&gt;There are a handfull of Node modules required for testing to work with and Ionic application and need to be added to our project. While you can install each of these modules separately, we&amp;rsquo;ve organized the install process into one handy command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save-dev angular2-template-loader html-loader jasmine jasmine-spec-reporter karma karma-chrome-launcher karma-jasmine karma-jasmine-html-reporter karma-sourcemap-loader karma-webpack null-loader protractor ts-loader ts-node @types/jasmine @types/node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command adds these modules to the &lt;code&gt;&amp;quot;devDependencies&amp;quot;&lt;/code&gt; node of your project&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt; file. There are quite a few modules here, but the important modules are &lt;code&gt;karma&lt;/code&gt;, &lt;code&gt;jasmine&lt;/code&gt; and &lt;code&gt;protractor&lt;/code&gt;. &lt;code&gt;karma&lt;/code&gt; is the Karma module which is our testing environment for unit testing. &lt;code&gt;jasmine&lt;/code&gt; is the Jasmine module which is the unit testing framework. &lt;code&gt;protractor&lt;/code&gt; is the Protractor module which is our testing environment for our end-to-end tests. The rest of the modules are utilities that allow this configuration to work.&lt;/p&gt;

&lt;h2 id=&#34;step-4-add-scripts-to-the-package-json&#34;&gt;Step 4: Add Scripts to the &lt;code&gt;package.json&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There are a couple of scripts that need to be added to the &lt;code&gt;package.json&lt;/code&gt; to make running tests from the command-line possible. Open the &lt;code&gt;package.json&lt;/code&gt; file and add the following scripts to your &lt;code&gt;&amp;quot;scripts&amp;quot;&lt;/code&gt; node:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;test&amp;quot;: &amp;quot;karma start ./test-config/karma.conf.js&amp;quot;,
&amp;quot;test-ci&amp;quot;: &amp;quot;karma start ./test-config/karma.conf.js --single-run&amp;quot;,
&amp;quot;e2e&amp;quot;: &amp;quot;npm run e2e-update &amp;amp;&amp;amp; npm run e2e-test&amp;quot;,
&amp;quot;e2e-test&amp;quot;: &amp;quot;protractor ./test-config/protractor.conf.js&amp;quot;,
&amp;quot;e2e-update&amp;quot;: &amp;quot;webdriver-manager update --standalone false --gecko false&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Make sure you add a trailing comma on the line above this code or your &lt;code&gt;package.json&lt;/code&gt; will stop working. Your code editor should inform you of the missing comma.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the addition of these items, you will be able to enter the &lt;code&gt;npm run test&lt;/code&gt; command to begin unit testing, or &lt;code&gt;npm run e2e&lt;/code&gt; to begin end-to-end testing.&lt;/p&gt;

&lt;h2 id=&#34;step-5-add-the-configuration-files&#34;&gt;Step 5: Add the Configuration Files&lt;/h2&gt;

&lt;p&gt;The control center for this testing configuration are a set of files that are inside the &lt;code&gt;ionic-unit-testing-example&lt;/code&gt; project which need to be added to our project. Open the folder where &lt;code&gt;ionic-unit-testing-example&lt;/code&gt; was decompressed earlier and locate the &lt;code&gt;test-config&lt;/code&gt; folder. Copy and paste that folder into the root of our project.
Open the folder in your code editor and take a look. You should see four files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;karma-test-shim.js
karma-config.js
mocks-ionic.js
protractor.conf.js
webpack.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;karma-config.js&lt;/code&gt; file is the configuration file for Karma. It uses &lt;code&gt;karma-test-shim.js&lt;/code&gt; to link more modules required for testing and &lt;code&gt;webpack.test.js&lt;/code&gt; to configure and compile our code for testing.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;protractor.conf.js&lt;/code&gt; file is the configuration file for Protractor.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mocks-ionic.js&lt;/code&gt; file is a collection of classes that are used to as a substitute for classes in the &lt;code&gt;ionic-angular&lt;/code&gt; module for testing. We will discuss mocking further later in this tutorial.&lt;/p&gt;

&lt;h2 id=&#34;step-6-adding-end-to-end-testing&#34;&gt;Step 6: Adding End-to-end Testing&lt;/h2&gt;

&lt;p&gt;Now that our unit testing configuration is set up, we need to add one more folder to our project so we can implement the end-to-end testing solution. Copy the &lt;code&gt;e2e&lt;/code&gt; folder found inside the location where you decompressed .zip file from the &lt;code&gt;ionic-unit-testing-example&lt;/code&gt; and paste that folder into the root of your project. This folder has the following files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.e2e-spec.ts
app.po.ts
tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tsconfig.json&lt;/code&gt; file is an important configuration file which assists with compiling the project and tests for end-to-end testing. The file is placed here because it isolates it from the project&amp;rsquo;s &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app.e2e-spec.ts&lt;/code&gt; file is an actual E2E test file. Note the name of the test as our configuration file is looking for files that have the &lt;code&gt;.e2e-spec.ts&lt;/code&gt; as part of the name to identify it as an E2E test and not an unit test. The &lt;code&gt;app.po.ts&lt;/code&gt; is an example of a page object, a helper file that assists in providing utility methods for locating elements and processing expected results. You can find out &lt;a href=&#34;http://www.protractortest.org/#/page-objects&#34;&gt;more about page objects on the Protractor Website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are following along with this tutorial, when you run the &lt;code&gt;npm run e2e&lt;/code&gt; command in your terminal window, this test should work. If you run this test with your project, it will probably fail. You will need to update the test to make it work for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; When you run E2E tests, make sure you are running &lt;code&gt;ionic serve&lt;/code&gt; in another terminal window. The E2E configuration expects to have a connection to the server and if it is not it will fail with an error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;adding-your-first-unit-test&#34;&gt;Adding Your First Unit Test&lt;/h2&gt;

&lt;p&gt;Before you can begin testing, you need to have a test file. To make sure the testing configuration is working, we&amp;rsquo;ll add a file to our project to test that the application loads.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;src/app/&lt;/code&gt; folder in your project and create a new file named &lt;code&gt;app.component.spec.ts&lt;/code&gt;. This will be our unit test file for the &lt;code&gt;MyApp&lt;/code&gt; class which is inside the &lt;code&gt;app.component&lt;/code&gt; file. Inside this new file, copy and paste the following code:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/leifwells/d2f5f442dcbd9617f2e3f0572db5ea76.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;This is not a tutorial on how to create tests, but&lt;/strong&gt; let&amp;rsquo;s take a brief look at this test code.&lt;/p&gt;

&lt;h2 id=&#34;angular-testing-utilities&#34;&gt;Angular Testing Utilities&lt;/h2&gt;

&lt;p&gt;As you can see, the test file has the typical methods for unit testing: &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;beforeEach&lt;/code&gt;, and &lt;code&gt;it&lt;/code&gt;. Inside the first &lt;code&gt;beforeEach&lt;/code&gt; is a call to the &lt;code&gt;TestBed&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;configureTestingModule()&lt;/code&gt; method. &lt;code&gt;TestBed&lt;/code&gt; is a module provided by the Angular team to facilitate testing. To find out more about testing in Angular, please read the &lt;a href=&#34;https://angular.io/guide/testing&#34;&gt;Angular Testing Guide&lt;/a&gt;. Seriously, read that documentation a few times and let it sink in.&lt;/p&gt;

&lt;p&gt;Now, take a look at places where &lt;code&gt;MyApp&lt;/code&gt; is listed. &lt;code&gt;MyApp&lt;/code&gt; is the component being tested here, and appears in the class import, inside the &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; method inside the &lt;code&gt;declarations&lt;/code&gt; array, inside the &lt;code&gt;imports&lt;/code&gt; array, and also in the second &lt;code&gt;beforeEach&lt;/code&gt; method when the component is actually created. This is how each of your test files will work.&lt;/p&gt;

&lt;p&gt;The first test, the code inside the first &lt;code&gt;it&lt;/code&gt; instance, checks to see if the &lt;code&gt;MyApp&lt;/code&gt; component is created. The second test checks that the &lt;code&gt;pages&lt;/code&gt; array created in the &lt;code&gt;MyApp&lt;/code&gt; class has two items.&lt;/p&gt;

&lt;h2 id=&#34;mocking-ionic-classes&#34;&gt;Mocking Ionic Classes&lt;/h2&gt;

&lt;p&gt;Another note of interest: mocking Ionic classes. With unit testing, developers should try to isolate the component to be tested. If you include the actual classes, technically you would be testing the Ionic framework, which is unnecessary.&lt;/p&gt;

&lt;p&gt;To understand how mocking works, look at the structure of items inside the &lt;code&gt;providers&lt;/code&gt; array. Typically,providers are listed simply by adding the class name to the array. In this case, we are mocking the classes using the &lt;code&gt;provide&lt;/code&gt; property to identify the name of the class to be mocked, and the &lt;code&gt;useClass&lt;/code&gt; property to identify the class to serve as the mock. We are using the mocks provided by the &lt;code&gt;ionic-unit-testing-example&lt;/code&gt; project found in the &lt;code&gt;test-config/mocks-ionic.ts&lt;/code&gt; file mentioned earlier.&lt;/p&gt;

&lt;p&gt;If you choose to not use mocks for Ionic classes, what may happen is that errors will occur running you down a never-ending rabbit hole. Mocking Ionic classes is the best way to avoid this problem.&lt;/p&gt;

&lt;h2 id=&#34;what-to-expect-when-unit-testing&#34;&gt;What to Expect When Unit Testing&lt;/h2&gt;

&lt;p&gt;This test is a sample test that will work with the project we are using in this tutorial and may not work for you. If you add this file to your own project and run the &lt;code&gt;npm run test&lt;/code&gt; command, what you may expect is an error stating that &lt;code&gt;no provider for&lt;/code&gt; or &lt;code&gt;no declaration for&lt;/code&gt;, at which point you will import that class into this file, add the class name to the &lt;code&gt;providers&lt;/code&gt; array or the &lt;code&gt;declarations&lt;/code&gt; array inside the &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; method argument object.&lt;/p&gt;

&lt;p&gt;You will probably need to create mock classes for your own providers. These mocks should accurately reflect the same methods but return expected values, for instance, mock data instead of data from a server.&lt;/p&gt;

&lt;p&gt;Reviewing the Angular Testing documentation will help you with testing your Ionic application. There are concepts described there that will assist you with testing processes that are asynchronous, as well as best practices to follow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sometimes when working on a unit test, you will not find a way to test a particular scenario. The problem may not be your test. It may be your code. Are the methods in your component too complex? Could you refactor your code to make your component more maintanable as well as more testable? Make sure you are looking at both sides, the test and the code you are testing, to ensure you have a successful testing practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;reviewing-the-e2e-test&#34;&gt;Reviewing the E2E Test&lt;/h2&gt;

&lt;p&gt;Earlier, we added the &lt;code&gt;e2e&lt;/code&gt; folder to our project which contained our first E2E test. Let&amp;rsquo;s take a look at it.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/leifwells/266bbd53503eaf2f0d1b9675e8610ef3.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Again, we see the typical testing methods of &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt;. One this of note here is the use of a second &lt;code&gt;describe&lt;/code&gt; method. This is used to help with organizing your tests.&lt;/p&gt;

&lt;p&gt;Inside your E2E tests, you will be using Promises. A lot. Good tests will chain Promises. You can find out more about how to structure your tests by reviewing the &lt;a href=&#34;http://www.protractortest.org/#/tutorial&#34;&gt;Protractor Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this tutorial, we created an example Ionic (&lt;code&gt;ionic-angular&lt;/code&gt;) project to configure for unit and end-to-end testing. We used the &lt;a href=&#34;https://github.com/ionic-team/ionic-unit-testing-example&#34;&gt;&lt;code&gt;ionic-unit-testing-example&lt;/code&gt;&lt;/a&gt; project on Github as a guide for installing the necessary node modules and configuration files to the project to get unit testing and E2E testing to work. Then we took a brief look at the test files. Hopefully, this will give you enough information to get you started with testing your own Ionic applications.&lt;/p&gt;

&lt;h3 id=&#34;links-for-this-article&#34;&gt;Links for this article:&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ionic-team/ionic-unit-testing-example&#34;&gt;ionic-unit-testing-example&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://angular.io&#34;&gt;Angular&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://angular.io/guide/testing&#34;&gt;Angular Testing&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://karma-runner.github.io/1.0/index.html&#34;&gt;Karma&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.protractortest.org/&#34;&gt;Protractor&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;updates&#34;&gt;Updates&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2017-09-02:&lt;/strong&gt;&lt;br /&gt;
Replaced two Markdown code blocks with Github Gists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/leifwells&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34; data-size=&#34;large&#34;&gt;Follow @leifwells&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rsquo;://platform.twitter.com/widgets.js&amp;rsquo;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;lsquo;script&amp;rsquo;, &amp;lsquo;twitter-wjs&amp;rsquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Getting Angular CLI Apps to Work Inside Electron</title>
          <link>https://leifwells.github.io/2016/06/12/getting-angular-cli-apps-to-work-inside-electron/</link>
          <pubDate>Sun, 12 Jun 2016 11:41:41 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/06/12/getting-angular-cli-apps-to-work-inside-electron/</guid>
          <description>

&lt;p&gt;I started working on a new Electron application using the Angular CLI and found a solution to a show-stopping problem that I thought that I should share.&lt;/p&gt;

&lt;h2 id=&#34;what-is-electron&#34;&gt;What is Electron?&lt;/h2&gt;

&lt;p&gt;For those who haven&amp;rsquo;t heard of it, &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; is a technology that combines &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node&lt;/a&gt; and &lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;Chromium&lt;/a&gt; and allows Web developers to build desktop applications using their skills with HTML/CSS/JavaScript. Electron was built by &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; as a shell for their &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; coding tool. &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt; and Microsoft&amp;rsquo;s &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; are built using Electron. Take a look at some of the applications out there that were &lt;a href=&#34;http://electron.atom.io/apps/&#34;&gt;built using Electron&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-angular-cli&#34;&gt;What is the Angular CLI?&lt;/h2&gt;

&lt;p&gt;I decided that I would build my new desktop application with Angular 2 which is currently in the release candidate stage. I also decided I was going to use the new &lt;a href=&#34;https://cli.angular.io/&#34;&gt;Angular CLI&lt;/a&gt; &amp;mdash; currently in beta &amp;mdash; to assemble this application. The Angular CLI allows developers to assemble an Angular 2 application quickly and easily. If you are interested in using Angular 2 you should really take a look at Angular CLI.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;After using the Angular CLI to create an Angular project, testing that project as a Web project (outside of Electron) making sure it works, I fired up the Electron app and loaded the project. I was immediately presented with the following errors in the console:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;GET file:///ember-cli-live-reload.js net::ERR_FILE_NOT_FOUND&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;GET file:///vendor/es6-shim/es6-shim.js net::ERR_FILE_NOT_FOUND&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;GET file:///vendor/reflect-metadata/Reflect.js net::ERR_FILE_NOT_FOUND&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;GET file:///vendor/systemjs/dist/system.src.js net::ERR_FILE_NOT_FOUND&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;GET file:///vendor/zone.js/dist/zone.js net::ERR_FILE_NOT_FOUND&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;To me, these errors made no sense. It probably won&amp;rsquo;t make sense to anyone else. It took a few tries and Google search key words for me to find &lt;a href=&#34;http://stackoverflow.com/a/37663447/5937538&#34;&gt;this problem and solution on Stack Overflow&lt;/a&gt; so I thought I&amp;rsquo;d mention it here to hopefully give it some more weight with Google. Special thanks to the mysterious Alex P for taking the time to publish this solution.&lt;/p&gt;

&lt;p&gt;The solution is fairly simple. In your Angular application&amp;rsquo;s &lt;code&gt;index.html&lt;/code&gt; that was generated by the Angular CLI find this line found inside your head tag:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change this line to:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;&amp;lt;base href=&amp;quot;./&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After making this suggested change my errors went away and my Angular application worked perfectly. From this point I was able to run the &lt;code&gt;ng build --watch&lt;/code&gt; command in terminal to watch for changes in my Angular application&amp;rsquo;s code and simply refresh the Electron application to see the changes.&lt;/p&gt;

&lt;p&gt;It is my hope that this tip saves people some grief. Good luck.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/leifwells&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34; data-size=&#34;large&#34;&gt;Follow @leifwells&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rsquo;://platform.twitter.com/widgets.js&amp;rsquo;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;lsquo;script&amp;rsquo;, &amp;lsquo;twitter-wjs&amp;rsquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ionic 2 &amp; Angular 2: Using a Google Spreadsheet as a Data Source</title>
          <link>https://leifwells.github.io/2016/06/09/ionic-2--angular-2-using-a-google-spreadsheet-as-a-data-source/</link>
          <pubDate>Thu, 09 Jun 2016 15:31:45 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/06/09/ionic-2--angular-2-using-a-google-spreadsheet-as-a-data-source/</guid>
          <description>

&lt;p&gt;This week I was asked by my friend &lt;a href=&#34;https://chrisgriffith.wordpress.com/&#34;&gt;Chris Griffith&lt;/a&gt; about using a Google spread sheet as a data source for a prototype he was building. Both Chris and I build prototypes as part of our daily jobs, so the question makes sense; what happens when you need to use archived data &amp;mdash; data that you need will need to update from time to time &amp;mdash; but you don&amp;rsquo;t have the time to build a server application or use something like Firebase to deliver the content?&lt;/p&gt;

&lt;p&gt;Certainly you may use a JSON file, but managing and maintaining this file can be a pain. It also doesn&amp;rsquo;t give a real online experience. So, off I went to The Googles to see what was out there on this topic.&lt;/p&gt;

&lt;p&gt;Chris threw a &lt;a href=&#34;https://ctrlq.org/code/20004-google-spreadsheets-json&#34;&gt;JQuery-specific on this subject link&lt;/a&gt; at me. Thanks to &lt;a href=&#34;https://ctrlq.org/&#34;&gt;Amit Agarwal&lt;/a&gt; for blogging. If you&amp;rsquo;d like to give him some support there are some Google scripts for purchase on his site.&lt;/p&gt;

&lt;p&gt;Using this technique we create a publicly viewable spread sheet and access it using Ionic 2 without using an API key, just the id of the spread sheet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat:&lt;/strong&gt; If you use this technique for creating a data source using a Google spread sheet please be advised that this spread sheet will be public. Please consider the data you are using with this technique and do not put anyone&amp;rsquo;s private data at risk. While the spread sheet will only be available via a URL, that doesn&amp;rsquo;t mean that someone won&amp;rsquo;t be able to find it. You can &lt;a href=&#34;https://www.google.com/search?q=automated+user+creation&amp;amp;oq=atomated+user+crea&amp;amp;aqs=chrome.1.69i57j0l5.5173j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8#q=create+a+set+of+mock+users+to+fill+a+database&#34;&gt;use Google to find mock data generators online&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat:&lt;/strong&gt; This code sample is built using Ionic 2 Beta 8 which was released earlier this week. I&amp;rsquo;ll do my best to remember update this code sample when and if there are significant changes to the code in the future (or remember to remove this notice). This code sample uses TypeScript. I wholeheartedly endorse using TypeScript with Ionic 2 and Angular 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;setting-up-a-spread-sheet&#34;&gt;Setting Up a Spread Sheet&lt;/h2&gt;

&lt;p&gt;Here is my Google spread sheet:&lt;/p&gt;

&lt;iframe style=&#34;width: 100%&#34; src=&#34;https://docs.google.com/spreadsheets/d/15Kndr-OcyCUAkBUcq6X3BMqKa_y2fMAXfPFLiSACiys/pubhtml?widget=true&amp;amp;headers=false&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Yeah, fairly simple, but this is an example post not a full application. Also notice that this is a live document, not an image. We&amp;rsquo;ve published this spread sheet on the Web via Google Drive.&lt;/p&gt;

&lt;p&gt;We have a typical first row that holds the headers for the columns. Notice how I have named these headers as lowercase and without spaces. I&amp;rsquo;ve purposefully named these this way because they will end up as keys for our data source.&lt;/p&gt;

&lt;p&gt;Now here comes the tricky part: setting it up to be available online. In Google Drive select the &lt;code&gt;File &amp;gt; Publish to the Web...&lt;/code&gt; option which will end up giving you a URL which has an id inside of it which is important. In our case the url looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/15Kndr-OcyCUAkBUcq6X3BMqKa_y2fMAXfPFLiSACiys/pubhtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The id that is in this url is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;15Kndr-OcyCUAkBUcq6X3BMqKa_y2fMAXfPFLiSACiys&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Do NOT use Google Drive&amp;rsquo;s blue Share button on the right-hand side of the tool bar for this technique. My results with using that sharing feature with this technique led to receiving JSON errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;where-are-we-going&#34;&gt;Where Are We Going.&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at the results that are logged with our completed code so you can understand where we are going with this code sample:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leifwells.github.io/images/2016-06-09_console_output.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Figure 1: Console output for the Final Code Sample.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At the top you see under the &amp;ldquo;Raw Data&amp;rdquo; text the Object that you receive from Google using this technique. And, as JSON goes, it is verbose. But the opened nodes are the ones we are focusing on here. Take a look at the &lt;code&gt;Object &amp;gt; feed &amp;gt; entry&lt;/code&gt; node. This is where your spread sheet data resides.&lt;/p&gt;

&lt;p&gt;The entry node is an Array of Objects representing the row of data in the spread sheet. Notice the keys that are prefixed with &lt;code&gt;gsx$&lt;/code&gt;: these are the nodes that contain the row content. For example, the &lt;code&gt;gsx$firstname&lt;/code&gt; key represents the firstname column of that row. Now you can see why I mentioned the naming of the headers in the first row.&lt;/p&gt;

&lt;p&gt;Now notice that the &lt;code&gt;gsx$firstname&lt;/code&gt; key points to an object contain an key of &lt;code&gt;$t&lt;/code&gt;. That is the property we are wanting to retrieve.&lt;/p&gt;

&lt;p&gt;I could have focused on the &lt;code&gt;Object &amp;gt; feed &amp;gt; entry &amp;gt; content&lt;/code&gt; node, but I decided this was the way to go.&lt;/p&gt;

&lt;p&gt;At the bottom of Figure 1 you also see the Array that we use in the view component.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-provider&#34;&gt;Creating the Provider&lt;/h2&gt;

&lt;p&gt;I used the Ionic CLI&amp;rsquo;s &lt;a href=&#34;http://ionicframework.com/docs/v2/cli/generate/&#34;&gt;generate command&lt;/a&gt; to create my provider and added some code to process the incoming data. Lets take a look at it:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/leifwells/7d5b7a8bb4bf0130d9faf1434ba953b8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Most of this code is boilerplate. The interesting part of this code resides inside the &lt;code&gt;subscribe()&lt;/code&gt; where the data is processed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Confession:&lt;/strong&gt; I am still working on gaining the skills necessary for modern Javascript Array processing. This code example is how I solved this problem, but if there are better ways of processing this data please let me know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In that code we loop through the &lt;code&gt;data.feed.entry&lt;/code&gt; node, find the items that are prefixed with &lt;code&gt;gsx$&lt;/code&gt; (and error checks that the subitem contains a &lt;code&gt;$t&lt;/code&gt; key) and processes the key stripping away the prefix and creates a typical key/value object which is pushed into our &lt;code&gt;returnArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It may be a little much for beginners to take in, but I think careful review of the code should reveal the code&amp;rsquo;s simplicity.&lt;/p&gt;

&lt;h2 id=&#34;the-component-code&#34;&gt;The Component Code&lt;/h2&gt;

&lt;p&gt;Now lets look at the code in Component that calls this provider:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/leifwells/b12ed12f85bd2b3aef8d5ac507e8be89.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Since this data is static we are only retrieving this data once so we are making the call inside out &lt;code&gt;construtor&lt;/code&gt; method. If we wanted to retrieve this data upon every time the view is loaded, we would leverage the new Ionic lifecycle event &lt;code&gt;ionViewLoaded&lt;/code&gt;. Take a look at &lt;a href=&#34;http://ionicframework.com/docs/v2/api/components/nav/NavController/&#34;&gt;the lifecycle events in the NavController documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also note that we have placed the spread sheet id inside this component. There are many ways to provide a separation of concerns in providers. We are placing the id of the spread sheet outside of the provider so that there is no need for any decision-making about which spread sheet to load. Another option would use constants inside our provider to hold the ids and expose those constants to our view.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this article we created and published a spread sheet on Google Drive and leveraged it as a data source in an Ionic 2 / Angular 2. Feel free to comment below or contact me on Twitter if you have questions or comments.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/leifwells&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34; data-size=&#34;large&#34;&gt;Follow @leifwells&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rsquo;://platform.twitter.com/widgets.js&amp;rsquo;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;lsquo;script&amp;rsquo;, &amp;lsquo;twitter-wjs&amp;rsquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ionic: Local Notification Sound, Custom Sound and File Placement </title>
          <link>https://leifwells.github.io/2016/06/03/ionic-local-notification-sound-custom-sound-and-file-placement/</link>
          <pubDate>Fri, 03 Jun 2016 22:15:27 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/06/03/ionic-local-notification-sound-custom-sound-and-file-placement/</guid>
          <description>&lt;p&gt;I&amp;rsquo;m creating an Ionic 2 and Ionic Native code sample for using Local Notifications and thought I&amp;rsquo;d take a moment to write up a post about notification sounds.&lt;/p&gt;

&lt;p&gt;Lets take a look at the typical code to create a Local Notification in Ionic 1:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/leifwells/302c04f99751e54b3bd92108a7fee065.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the object being passed to the schedule method you see a &lt;code&gt;sound&lt;/code&gt; property. This property is set to the default sound represented by &lt;code&gt;&#39;res://platform_default&#39;&lt;/code&gt; which, of course, is the sound that the user has selected as their notification sound.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; When you are testing with the iOS Simulator, the default sound &lt;strong&gt;does not play.&lt;/strong&gt; This fact could possibly lose you time, effort, hair and sanity. As always, if something isn&amp;rsquo;t working as expected in the simulator or emulator, take the time to test it on a device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; On the Android platform your notifications will always make a sound whether your application is in the foreground or the background. On iOS, the only time you&amp;rsquo;ll see your application&amp;rsquo;s notifications is when your application is in the background.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Default sounds are great, but, hey, your app is something special and deserves its very own notification sound. Right?&lt;/p&gt;

&lt;p&gt;In that case we make a simple change to the property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    sound: &#39;file://audio/notification.wav&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we are using a &lt;code&gt;.wav&lt;/code&gt; file which works on both iOS and Android. You&amp;rsquo;ll notice we are using the &lt;code&gt;file://&lt;/code&gt; protocol to retrieve this file. But where do we place this file so that it can be found?&lt;/p&gt;

&lt;p&gt;In Ionic, the file should be placed in the &lt;code&gt;www&lt;/code&gt; folder. That makes sense in &lt;strong&gt;Ionic 1&lt;/strong&gt; since basically everything goes there. So, using this code example the file would be located at &lt;code&gt;www/audio/notification.wav&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code in &lt;strong&gt;Ionic 2&lt;/strong&gt; using &lt;strong&gt;Ionic Native&lt;/strong&gt; might look like this:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/leifwells/d80f25e1fba0506467f2864dfaf362bc.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;But don&amp;rsquo;t be confused by the new &lt;strong&gt;Ionic 2&lt;/strong&gt; directory structure. The custom sound file does not belong in the &lt;code&gt;app&lt;/code&gt; folder. It, too, should reside in the &lt;code&gt;www&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/leifwells&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34; data-size=&#34;large&#34;&gt;Follow @leifwells&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rsquo;://platform.twitter.com/widgets.js&amp;rsquo;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;lsquo;script&amp;rsquo;, &amp;lsquo;twitter-wjs&amp;rsquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Setting Android Icons with Local Notifications</title>
          <link>https://leifwells.github.io/2016/05/30/setting-android-icons-with-local-notifications/</link>
          <pubDate>Mon, 30 May 2016 00:01:31 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/05/30/setting-android-icons-with-local-notifications/</guid>
          <description>

&lt;p&gt;My &lt;a href=&#34;https://leifwells.github.io/2016/05/28/lessons-learned-unnamed-project-2016-05/&#34;&gt;previous post&lt;/a&gt; lamented my ignorance about setting up Android icons for Local Notifications in an Ionic 1 project. I found a lot of speculation in my Google search as to how to handle them but not a lot of explanation or examples. In this post I am presenting the results of the research I completed on this topic during a recent project.&lt;/p&gt;

&lt;h2 id=&#34;understanding-how-notifications-work-on-android&#34;&gt;Understanding How Notifications Work on Android&lt;/h2&gt;

&lt;p&gt;The Android platform a notification requires two icons. Lets take a look at Figure 1 to identify them:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leifwells.github.io/images/android_notification_icons_example.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Figure 1: Where the Android notification icons appear&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;br /&gt;
As you can see, there is an icon (1) that appears in the status bar as well as in the notification listing (2) along side another larger icon (3).&lt;/p&gt;

&lt;p&gt;Lets take a look at the typical notification code that might appear in a service in your application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var setUpNotification = function( note ) {
    var deferred = $q.defer();
    
    $cordovaLocalNotification.schedule({
        id: note.id,
        at: note.at,
        text: note.text,
        title: note.title,
        sound: &#39;file://audio/notification.wav&#39;,
        badge: 1,
        data: &#39;hello=world&#39;,
        autoClear: false,
        icon: &#39;res://icon.png&#39;,
        smallIcon: &#39;res://ic_stat_notify.png&#39;
    }).then(function ( result ) {
        console.log(note.title  + &#39; Notification Set&#39;);
        deferred.resolve( result );
    }, function ( error ) {
        console.log( &#39;setUpNotification ERROR: &#39; + error );
        deferred.reject( error );
    });
            
    return deferred.promise;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above the object being sent to the plugin has an &lt;code&gt;icon&lt;/code&gt; and an &lt;code&gt;smallIcon&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;icon&lt;/code&gt; is the large icon that appears in the notifications listing. Typically this icon is the same as your application&amp;rsquo;s icon so that there is a visual association between the notification and the application that scheduled it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;smallIcon&lt;/code&gt; property sets the small icon that appears in two places: in the status bar when a notification occurs and next to the larger icon in the notifications listing to visually associate the icon in the status bar with both the notification and the application.&lt;/p&gt;

&lt;h2 id=&#34;where-do-these-icons-go&#34;&gt;Where Do These Icons Go?&lt;/h2&gt;

&lt;p&gt;In that code sample, notice that the links to these icons are prefixed with &lt;code&gt;res://&lt;/code&gt;. That means these icons are located in the &lt;code&gt;platforms/android/res&lt;/code&gt; folder which is where the icons for each screen density reside. The &lt;code&gt;res&lt;/code&gt; folder has several folders in it with names like &lt;code&gt;drawable-hdpi&lt;/code&gt; and inside each of these folders there should already be a file named &lt;code&gt;icon.png&lt;/code&gt;. When you build the Android platform using the Ionic CLI, images located &lt;code&gt;resources/android/icon&lt;/code&gt; folder renamed and copied into the proper &lt;code&gt;drawable&lt;/code&gt; folder. When your application runs on Android, these folders are used to provide the proper icons for the device&amp;rsquo;s resolution.&lt;/p&gt;

&lt;p&gt;Let me try to make this more succinct:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The images for the &lt;code&gt;icon&lt;/code&gt; property are in your &lt;code&gt;resources/android/icons&lt;/code&gt; folder, automatically created for you by Ionic. You should update those images for your application and when you use the &lt;code&gt;ionic build android&lt;/code&gt; command, those files are copied to the correct folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The images for the &lt;code&gt;smallIcon&lt;/code&gt; property need to be created.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-big-are-the-status-bar-icons&#34;&gt;How Big Are The Status Bar Icons?&lt;/h2&gt;

&lt;p&gt;The status bar icons need to be created for each Android screen pixel density. With a little research I was able to find out what sizes are required:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;22 × 22 area in 24 × 24 (mdpi)&lt;br /&gt;
33 × 33 area in 36 × 36 (hdpi)&lt;br /&gt;
44 × 44 area in 48 × 48 (xhdpi)&lt;br /&gt;
66 × 66 area in 72 × 72 (xxhdpi)&lt;br /&gt;
88 × 88 area in 96 × 96 (xxxhdpi)&lt;br /&gt;&lt;br /&gt;
Reference: &lt;a href=&#34;http://iconhandbook.co.uk/reference/chart/android/&#34;&gt;Icon Handbook&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above reference is telling us that, for instance, for the xxxhdpi screen density a 96 x 96 pixel icon file using an area 88 x 88 pixels need to be created. Basically, center your 88 x 88 pixel graphic in your 96 x 96 pixel image.&lt;/p&gt;

&lt;p&gt;Per the &lt;a href=&#34;https://developer.android.com/guide/practices/ui_guidelines/icon_design.html&#34;&gt;Android guidelines&lt;/a&gt;, you should use the prefix &lt;code&gt;ic_stat_notify_&lt;/code&gt; (&amp;ldquo;ic&amp;rdquo; for icon, &amp;ldquo;stat&amp;rdquo; for status bar, &amp;ldquo;notify&amp;rdquo; for notification) for the image name. These files should be white on transparency and should be saved in the PNG file format. For the purpose of this example, I simply used the name &lt;code&gt;ic_stat_notify&lt;/code&gt; as I was only using one file for every notification. Each file should be placed into the proper screen density folder. For instance, the 36 x 36 icon image for the hdpi screen density should go into the &lt;code&gt;platforms/android/res/drawable-hdpi&lt;/code&gt; folder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; You can put these files into the &lt;code&gt;platforms/android/res/&lt;/code&gt; folders, but if you ever need to run the &lt;code&gt;ionic platform remove android&lt;/code&gt; command, you&amp;rsquo;ll find that those images have disappeared. Also, if you are working with a team, since the platform folder normally isn&amp;rsquo;t stored in your code repository each team member will need to manually move these files into place. Guess what happens if the icons change. A pain, right? &lt;strong&gt;So don&amp;rsquo;t do it and continue reading.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;how-can-i-get-the-icons-there-automagically&#34;&gt;How Can I Get The Icons There Automagically?&lt;/h2&gt;

&lt;p&gt;As you can see from the notice above, manually moving these files into place might cause all kinds of troubles for you and your team.&lt;/p&gt;

&lt;p&gt;During my research for this feature I found &lt;a href=&#34;https://github.com/katzer/cordova-plugin-local-notifications/issues/504#issuecomment-139235623&#34;&gt;this little nugget&lt;/a&gt;. Below you will find code that will assist with placing these files into the proper places automatically.&lt;/p&gt;

&lt;p&gt;This Javascript file should be placed into your &lt;code&gt;hooks/after_prepare/&lt;/code&gt; folder. I don&amp;rsquo;t think it matters how the file is named (the ReadMe says &amp;ldquo;Any scripts you add to these directories will be executed before and after the commands corresponding to the directory name.&amp;rdquo;) but the files in this folder are processed when you build your project. To find out more about how this works, take a look at the &lt;code&gt;hooks/ReadMe.md&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This code assumes you have files named &amp;ldquo;ic_stat_notify.png&amp;rdquo; inside a folder at the root of your project named &lt;code&gt;ic_status_images/{screen density}/&lt;/code&gt;. Set up your folder structure any way you like and edit this code to reflect those changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/*      file: hooks/after_prepare/add_platform_class.js     */


#!/usr/bin/env node

var filestocopy = [
    {
        &amp;quot;ic_status_images/mdpi/ic_stat_notify.png&amp;quot;:
        &amp;quot;platforms/android/res/drawable-mdpi/ic_stat_notify.png&amp;quot;
    },
    {
        &amp;quot;ic_status_images/hdpi/ic_stat_notify.png&amp;quot;:
        &amp;quot;platforms/android/res/drawable-hdpi/ic_stat_notify.png&amp;quot;
    },
    {
        &amp;quot;ic_status_images/xhdpi/ic_stat_notify.png&amp;quot;:
        &amp;quot;platforms/android/res/drawable-xhdpi/ic_stat_notify.png&amp;quot;
    },
    {
        &amp;quot;ic_status_images/xxhdpi/ic_stat_notify.png&amp;quot;:
        &amp;quot;platforms/android/res/drawable-xxhdpi/ic_stat_notify.png&amp;quot;
    },
    {
        &amp;quot;ic_status_images/xxxhdpi/ic_stat_notify.png&amp;quot;:
        &amp;quot;platforms/android/res/drawable-xxxhdpi/ic_stat_notify.png&amp;quot;
    }
];

var fs = require(&#39;fs&#39;);
var path = require(&#39;path&#39;);

// no need to configure below
var rootdir = process.argv[2];
console.log(&amp;quot;&amp;quot;);
console.log(&amp;quot;~~~~ Start Copying Notification Status Icons&amp;quot;);
filestocopy.forEach(function (obj) {
    Object.keys(obj).forEach(function (key) {
        var val = obj[key];
        var srcfile = path.join(rootdir, key);
        var destfile = path.join(rootdir, val);
        console.log(&amp;quot;copying: &amp;quot; + srcfile);
        console.log(&amp;quot;     to: &amp;quot; + destfile);
        var destdir = path.dirname(destfile);
        if (fs.existsSync(srcfile) &amp;amp;&amp;amp; fs.existsSync(destdir)) {
            fs.createReadStream(srcfile).pipe(
                fs.createWriteStream(destfile));
        }
    });
});
console.log(&amp;quot;~~~~ End Copying Notification Status Icons&amp;quot;);
console.log(&amp;quot;&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I hope this article assists folks with using Local Notifications on Android. Let me know if you have further insights.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/leifwells&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34; data-size=&#34;large&#34;&gt;Follow @leifwells&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rsquo;://platform.twitter.com/widgets.js&amp;rsquo;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;lsquo;script&amp;rsquo;, &amp;lsquo;twitter-wjs&amp;rsquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lessons Learned: Unnamed Project 2016-05</title>
          <link>https://leifwells.github.io/2016/05/28/lessons-learned-unnamed-project-2016-05/</link>
          <pubDate>Sat, 28 May 2016 14:57:05 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/05/28/lessons-learned-unnamed-project-2016-05/</guid>
          <description>

&lt;h2 id=&#34;an-unnamed-project&#34;&gt;An Unnamed Project&lt;/h2&gt;

&lt;p&gt;Last month my friends at &lt;a href=&#34;http://www.skywardinteractive.com/&#34;&gt;Skyward Interactive&lt;/a&gt; requested my assistance with a project that needed a cross-platform mobile solution. The project, which will remain unnamed because the client is a start-up, is a prototype for a service and required phone, tablet and server development. The phone apps is for customers, the tablet app is for administrators and the server ties them all together.&lt;/p&gt;

&lt;p&gt;For mobile development Skyward typically builds native iOS applications, but most of their iOS resources were tied up with other projects and since this project had a short deadline and budget they asked me if I could assemble the iOS and Android phone solution. Of course, I decided to use the &lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic Framework&lt;/a&gt; to create these prototypes.&lt;/p&gt;

&lt;h2 id=&#34;the-risks&#34;&gt;The Risks&lt;/h2&gt;

&lt;p&gt;Of course, the risks were weighed before committing to a project like this as they should.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Working with Friends:&lt;/strong&gt; When I say the folks at Skyward are my friends, I mean that. These are people who have seen me through some good and bad days. Who have lifted me up when I was down. Who have driven by to check on my house when I was out of town after I had a flash of anxiety during my flight and thought I&amp;rsquo;d left my front door open. These are good people who I didn&amp;rsquo;t want to let down nor with whom I wanted conflict.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Not Knowing What We Don&amp;rsquo;t Know:&lt;/strong&gt; Working with a start-up is a risk category all in itself. I would have no direct interaction with the client and completely trusted Skyward to manage them, but I still had to ask these questions: Do they know what they want? Do they understand the developement process? Will they be active or passive during the project? Will they pay?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apple Store &amp;amp; Google Play Submissions:&lt;/strong&gt; One interesting point about this project was that the client wanted to place this prototype in the app stores instead of using a service like &lt;a href=&#34;https://developer.apple.com/testflight/&#34;&gt;TestFlight&lt;/a&gt; as a way to test with actual customers. This is always a risk, as you never know how long it will take to get an application reviewed by Apple. Two days? Two weeks?&lt;/p&gt;

&lt;p&gt;In past projects I&amp;rsquo;ve never submitted apps to the stores. Someone else had that responsibility. I&amp;rsquo;ve never submitted an application built using Ionic to the app stores. Skyward had never submitted an app to Google Play. So this is a potential point of failure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were the risks as I saw them, eyes wide open, going into the project. On the reward side, I&amp;rsquo;d have another app in the app stores, my first Ionic app in the app stores. It didn&amp;rsquo;t hurt that since I&amp;rsquo;m seriously underemployed at this time I&amp;rsquo;d have billable work. So, off to the races.&lt;/p&gt;

&lt;h2 id=&#34;and-the-work-began&#34;&gt;And The Work Began&lt;/h2&gt;

&lt;p&gt;With wire frames in hand, I began to work laying out the application UI in earnest. I get excited sometimes. This time it cost me in frustration later in the project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Haste Makes Waste&lt;/strong&gt; &amp;mdash; Don&amp;rsquo;t speed through your application layout. Make certain to take the time to make the UI easily updatable; every project gets a UI update or three. It happens. Plan on it and create HTML and CSS (in this case Sass) files you can maintain even for a prototype. Build it right the first time so the changes will be easy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;cordova-plugins-and-open-source-software&#34;&gt;Cordova Plugins and Open Source Software&lt;/h2&gt;

&lt;p&gt;This is an observation, not a complaint: open source projects can get stale. For a group of projects like the Cordova plugins, this can be a dangerous thing. Just because the project was updated recently does not mean it very active. Just because a project hasn&amp;rsquo;t had activity in a year doesn&amp;rsquo;t mean the project isn&amp;rsquo;t rock solid.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Get to Know Your OS Project Before Deciding to Use It&lt;/strong&gt; &amp;mdash; Always review any currently open issues on the project&amp;rsquo;s Github site before using any open source projects. It might save your life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Be a Good OS Citizen&lt;/strong&gt; &amp;mdash; If you find a problem with an open source project make sure you post an issue on the project&amp;rsquo;s Github site, otherwise no one will ever know. If you find a work-around for any issues you encounter or issues already filed, post them as well so everyone else will know, too. If you know how to fix an issue, create a pull request. You may save someone else&amp;rsquo;s life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;local-notifications&#34;&gt;Local Notifications&lt;/h2&gt;

&lt;p&gt;This project required the use of Local Notifications mainly due to resistance of the time and expense of setting up Push Notifications. Push would have been the proper way, of course, but these are the cards we were dealt. Local Notifications shouldn&amp;rsquo;t be all that tricky, but they can be depending on how you manage them, what kind of data you are given and create and the symptoms that occur when you&amp;rsquo;re doing it wrong.&lt;/p&gt;

&lt;p&gt;For instance, I was receiving specific times of events that reminders were to be created for. The times were given to me as a Unix timestamp. I needed to create a Date object from the timestamp, subtract an hour from that Date object then convert it to a timestamp that Local Notifications could use. That proved  very tricky for me. Eventually I used &lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt; to wrangle the Date, time subtraction and creating of Local Notification timestamps and Moment.js was, as always, a joy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Moment.js Is Your Friend&lt;/strong&gt; &amp;mdash; If you are dealing with dates and time in your application, go ahead and add Moment.js. It is simple to use and worth the effort of being added.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Isolate New Features Before Implementation&lt;/strong&gt; &amp;mdash; Before adding a feature like Local Notifications or Background Geolocation (as I will discuss later) to your project take the time to create prototype projects so you may master these features before adding them to your project. Test them on devices, too. The goal is to be able to ferret out any feature issues before mixing it with your application. You want to be able to avoid working on feature bugs and application bugs at the same time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lesson not learned? Notification and status bar icons on Android are not easy. And I still do not know how to make them work. Once I do, I will make a post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE: 2016-05-30:&lt;/strong&gt; Handle local notification icons on the Android platform by reading my post &lt;a href=&#34;https://leifwells.github.io/2016/05/30/setting-android-icons-with-local-notifications/&#34;&gt;Setting Android Icons with Local Notifications&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;background-geolocation-plugin&#34;&gt;Background Geolocation Plugin&lt;/h2&gt;

&lt;p&gt;Background Geolocation should also be easy. And, of course, everyone was very concerned about battery usage. Since we needed a cross-platform solution, but the &lt;a href=&#34;http://shop.transistorsoft.com/pages/cordova-background-geolocation-premium&#34;&gt;normal solution&lt;/a&gt; requires a &lt;a href=&#34;http://shop.transistorsoft.com/pages/cordova-background-geolocation-premium#plans&#34;&gt;premium version purchase&lt;/a&gt;, which the project budget couldn&amp;rsquo;t afford, unfortunately. As always, start-ups typically have shoestring budgets.&lt;/p&gt;

&lt;p&gt;An alternative Cordova plugin for &lt;a href=&#34;https://github.com/mauron85/cordova-plugin-background-geolocation&#34;&gt;Background Geolocation&lt;/a&gt; was available and I decided to take a chance with it. It worked as advertised.&lt;/p&gt;

&lt;p&gt;I did find one issue with this plugin for which &lt;a href=&#34;https://github.com/mauron85/cordova-plugin-background-geolocation/issues/75&#34;&gt;I filed an issue&lt;/a&gt;: the &amp;lsquo;ANDROID_DISTANCE_FILTER&amp;rsquo; setting was throwing an error, oddly enough, on the Android platform. Specifically on my Android Marshmallow phones. Changing the setting to an actual integer, in this case a 0, resolved the issue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lessons Learned:&lt;/strong&gt; &amp;mdash; See above lessons of isolating a feature before implementing in a project, reviewing issues before committing to using a plugin and filing issues if you find them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Background Geolocation Requires Movement&lt;/strong&gt; &amp;mdash; In the app, we have a feature where the geolocation would automatically shut down after a period of time. I set the code up to check the time after each geolocation ping. During on-device testing I received a bug report stating the feature was not working. I asked &amp;ldquo;Did you move?&amp;rdquo; Yes, the geolocation doesn&amp;rsquo;t usually ping if you don&amp;rsquo;t move about 15 feet or so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;apple-store-rejections&#34;&gt;Apple Store Rejections&lt;/h2&gt;

&lt;p&gt;Here is where things went wrong. The first submission was rejected by Apple because &amp;ldquo;On launch and content download, your app stores 6.21MB on the user&amp;rsquo;s iCloud, which does not comply with the iOS Data Storage Guidelines.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The project was using Local Storage, but only to hold two strings in an object. There was no content download. This rejection was a mystery to me and made me very frustrated. To make matters worse, there was no guidance from Apple or online that was helpful in this situation &lt;a href=&#34;https://github.com/phonegap/build/issues/191&#34;&gt;except for this&lt;/a&gt;: set a preference in the Cordova config.xml.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;preference name=&amp;quot;BackupWebStorage&amp;quot; value=&amp;quot;none&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We did that and resubmitted. We were rejected again for the same exact reason.&lt;/p&gt;

&lt;p&gt;Submitting a third time did the trick, but honestly this is still haunting me. What was causing this 6.21MB store? Was it Local Storage? Was it another plugin?Was it a by-product of building the app? Was it anything I was doing or could change or control? I wish I had answers, but I don&amp;rsquo;t.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lesson Learned: Apple Store rejection is a fact of life.&lt;/strong&gt; &amp;mdash; Sometimes you get rejected. If you can fix what an Apple reviewer complains about, do it. If not, try again. But, for the sake of the project, allow for time for multiple reviews by Apple in your schedule. Right now, the reviews are taking less than 48 hours. Don&amp;rsquo;t count on that always being the case. Consider Apple&amp;rsquo;s schedule of updates to iOS; whenever an update is imminent, every app developer will be updating their apps and submitting them to Apple. Adding three weeks before the deadline might be advisable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;At the end of the day we have a working prototype live in the Apple Store and the Google Play Store. And I learned a few things about development and myself along the way. My hope is that this post may be of some help to you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/leifwells&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34; data-size=&#34;large&#34;&gt;Follow @leifwells&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rsquo;://platform.twitter.com/widgets.js&amp;rsquo;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;lsquo;script&amp;rsquo;, &amp;lsquo;twitter-wjs&amp;rsquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>I Attended ng-conf 2016. Yay!</title>
          <link>https://leifwells.github.io/2016/05/07/i-attended-ng-conf-2016.-yay/</link>
          <pubDate>Sat, 07 May 2016 18:35:39 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/05/07/i-attended-ng-conf-2016.-yay/</guid>
          <description>

&lt;p&gt;This week I attended &lt;a href=&#34;http://www.ng-conf.org/&#34;&gt;ng-conf&lt;/a&gt; for the first time. Last year I tried to get tickets in the lottery but ended up watching online with most everyone else. Of course, I rewatched several of the sessions several times trying to drain every drop of knowledge from these presenters.&lt;/p&gt;

&lt;p&gt;This year I took up &lt;a href=&#34;http://egghead.io&#34;&gt;egghead.io&lt;/a&gt; on their &amp;ldquo;buy a workshop ticket and you can buy a conference ticket instead of trying to get a lottery ticket&amp;rdquo; offer. Seriously, that was only way I was going to get a conference ticket. I&amp;rsquo;m not lucky enough to win the ng-conf ticket lottery (or the &lt;a href=&#34;https://events.google.com/io2016/&#34;&gt;Google I/O (soon!)&lt;/a&gt; lottery or the WWDC ticket lottery).&lt;/p&gt;

&lt;p&gt;The conference was held in Salt Lake City at the Grand American Hotel, an impressively nice place to hold a conference. If you have the money and want to visit SLC, this is the place.&lt;/p&gt;

&lt;h2 id=&#34;the-angular-2-workshop&#34;&gt;The Angular 2 Workshop&lt;/h2&gt;

&lt;p&gt;The egghead.io Angular 2 workshop, lead by a clean-shaven &lt;a href=&#34;https://egghead.io/instructors/john-lindquist&#34;&gt;John Lindquist&lt;/a&gt;, was a good experience. I had two sets of goals when I bought my ticket: either to learn a lot during the workshop, or to spend time before the workshop learning as much as possible about Angular 2 and use the event as a measure of what I&amp;rsquo;d correctly learned. Luckily, I had spent a great deal of time becoming acquainted with the new version beforehand, and felt like I was on the mark with most of the content in the workshop. Good on me.&lt;/p&gt;

&lt;h2 id=&#34;catching-up-with-friends&#34;&gt;Catching Up with Friends&lt;/h2&gt;

&lt;p&gt;Another bit of luck was that &lt;a href=&#34;https://www.ng-conf.org/#/speaker/chrisgriffith&#34;&gt;Chris Griffith&lt;/a&gt; offered to share his room with me (Super Thanks, Christopher!). Chris was accepted as a speaker this year speaking on &lt;a href=&#34;https://www.ng-conf.org/#/sessions/chrisgriffithFD&#34;&gt;Ionic 2&lt;/a&gt; during the conference&amp;rsquo;s Fair Day. While eating dinner with &lt;a href=&#34;https://twitter.com/thack&#34;&gt;Terence Carrol&lt;/a&gt;, he asked us how we first met and how we started working together on various projects. It took me a while to realize that Chris and I first worked together on the 360Flex conference application built with Flex and AIR. That was a long time ago.&lt;/p&gt;

&lt;p&gt;I also got to spend some time with a few folks on the Ionic team. I am looking forward to getting to know them better over the next year.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hanging at the &lt;a href=&#34;https://twitter.com/hashtag/BeerHive?src=hash&#34;&gt;#BeerHive&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ngconf?src=hash&#34;&gt;#ngconf&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Ionicframework&#34;&gt;@Ionicframework&lt;/a&gt; &lt;a href=&#34;https://t.co/YMLCe2cQaZ&#34;&gt;pic.twitter.com/YMLCe2cQaZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brandy Carney (@brandyscarney) &lt;a href=&#34;https://twitter.com/brandyscarney/status/728072827564216320&#34;&gt;May 5, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;sessions&#34;&gt;Sessions&lt;/h2&gt;

&lt;p&gt;There were some great sessions on Wednesday and Friday. So great, honestly, I&amp;rsquo;m going to need to rewatch most of them because all the information was hurting my brain. I think this tweet really tells you about where my head is at now that I am home:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Things &lt;a href=&#34;https://twitter.com/hashtag/ngconf?src=hash&#34;&gt;#ngconf&lt;/a&gt; has me excited about:&lt;a href=&#34;https://twitter.com/hashtag/Angular2?src=hash&#34;&gt;#Angular2&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/Ionic2?src=hash&#34;&gt;#Ionic2&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/Augury?src=hash&#34;&gt;#Augury&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/AngularUniversal?src=hash&#34;&gt;#AngularUniversal&lt;/a&gt;&lt;br&gt;Testing&lt;br&gt;The new new new router&lt;a href=&#34;https://twitter.com/hashtag/GoogleCloud?src=hash&#34;&gt;#GoogleCloud&lt;/a&gt;&lt;br&gt;This community&lt;/p&gt;&amp;mdash; Leif Wells (@leifwells) &lt;a href=&#34;https://twitter.com/leifwells/status/728356856813379584&#34;&gt;May 5, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;so-much-more-to-say&#34;&gt;So Much More to Say&lt;/h2&gt;

&lt;p&gt;In the upcoming week I&amp;rsquo;ll try to talk about all of these things and more. I had a great time at ng-conf, and now I need to decompress and recover before applying things I learned to projects I have in mind.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Why EverythingIsInBeta?</title>
          <link>https://leifwells.github.io/2016/04/16/why-everythingisinbeta/</link>
          <pubDate>Sat, 16 Apr 2016 23:44:14 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/04/16/why-everythingisinbeta/</guid>
          <description>

&lt;p&gt;I&amp;rsquo;m trying to keep track of several projects currently in beta using the Twitter hashtag #EverythingIsInBeta. It&amp;rsquo;s more of an information point rather than something actually useful but, hey, it&amp;rsquo;s Twitter. When was Twitter ever useful?&lt;/p&gt;

&lt;h2 id=&#34;my-brain-hurts&#34;&gt;MY BRAIN HURTS!&lt;/h2&gt;

&lt;p&gt;But seriously, it&amp;rsquo;s difficult to jump in and learn new technology. It makes it even more difficult when that technology is in beta. It becomes frustratingly dumbfounding when that beta technology is dependent upon other beta technologies. There are challenges here. More than once I&amp;rsquo;ve had to step away from demo projects due to various things not working. These non-working &amp;ldquo;things&amp;rdquo; are not necessarily bugs. They can simply be features that aren&amp;rsquo;t complete or even my brain refusing to adapt to new ways of thinking.&lt;/p&gt;

&lt;p&gt;Even &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, the typed superset of Javascript that is used with Angular 2 is under development, though it seems to be fairly solid these days. Microsoft has published a &lt;a href=&#34;https://github.com/Microsoft/TypeScript/wiki/Roadmap&#34;&gt;TypeScript Roadmap&lt;/a&gt; if you&amp;rsquo;d like to see what is coming.&lt;/p&gt;

&lt;h2 id=&#34;finding-everything&#34;&gt;Finding Everything&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll find #EverythingIsInBeta in my sidebar and &lt;a href=&#34;&#34;&gt;in this post&lt;/a&gt; with links to each project&amp;rsquo;s Changelog.md. Well, except for the Ionic CLI project which never seems to have a changelog.&lt;/p&gt;

&lt;p&gt;Keep in mind that, for instance, just because Angular 2 is at beta 15, it doesn&amp;rsquo;t necessarily mean that Ionic 2 is using that beta. As a practical matter, the Ionic team is behind pace with the Angular 2 project to avoid Angular 2&amp;rsquo;s bleeding edge. Once Angular 2 is released, I am certain that Ionic 2&amp;rsquo;s release will follow quickly after.&lt;/p&gt;

&lt;p&gt;Also, keep in mind, none of these projects are giving guidance as to when a release may be imminent. &lt;em&gt;&amp;ldquo;Soon&amp;rdquo;&lt;/em&gt;  is the only thing said by people close to these projects.&lt;/p&gt;

&lt;p&gt;Anyway, you can keep up with the latest betas, &lt;a href=&#34;https://twitter.com/leifwells&#34;&gt;follow me on Twitter&lt;/a&gt; and keep an eye out for &lt;a href=&#34;https://twitter.com/hashtag/EverythingIsInBeta&#34;&gt;#EverythingIsInBeta&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;latest-tweets&#34;&gt;Latest Tweets&lt;/h2&gt;

&lt;p&gt;&lt;a class=&#34;twitter-timeline&#34; href=&#34;https://twitter.com/hashtag/EverythingIsInBeta&#34; data-widget-id=&#34;721395116104146944&#34;&gt;#EverythingIsInBeta Tweets&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;lsquo;http&amp;rsquo;:&amp;lsquo;https&amp;rsquo;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;rdquo;://platform.twitter.com/widgets.js&amp;rdquo;;fjs.parentNode.insertBefore(js,fjs);}}(document,&amp;ldquo;script&amp;rdquo;,&amp;ldquo;twitter-wjs&amp;rdquo;);&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AngularFire 2 at the AngularJS Mountain View Meetup</title>
          <link>https://leifwells.github.io/2016/04/16/angularfire-2-at-the-angularjs-mountain-view-meetup/</link>
          <pubDate>Sat, 16 Apr 2016 12:21:17 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/04/16/angularfire-2-at-the-angularjs-mountain-view-meetup/</guid>
          <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;I&amp;rsquo;m building an Ionic 2 starter with social login using Firebase!&amp;rdquo;&lt;/em&gt; said hundreds of developers participating in the &lt;a href=&#34;https://github.com/driftyco/ionic/blob/2.0/CHANGELOG.md&#34;&gt;Ionic 2 beta&lt;/a&gt;. Yeah, I&amp;rsquo;m doing it as well. It&amp;rsquo;s not a bad idea. Usually, if your app uses online data your users will be required to login. Creating a starter app &amp;mdash;&amp;ndash; a set of code from which you can base a new application upon &amp;mdash;&amp;ndash; would certainly save time and effort creating new applications. In this case it will also give you a good feel for the new way of doing things in Ionic 2. And &lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt; is a great service that allows you to easily create social logins.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve attempted to create my social login starter for weeks. There are several Firebase-related &lt;a href=&#34;http://angular.io&#34;&gt;Angular 2&lt;/a&gt; example apps available on github that were created using &lt;a href=&#34;https://angularfire2.com&#34;&gt;AngularFire 2&lt;/a&gt; or just using the Firebase TypeScript definitions, but I could only get one of them to actually work. One problem has been that AngularFire, the project that everyone uses with Firebase in their Angular 1 projects, simply hasn&amp;rsquo;t been ready for use with Angular 2.&lt;/p&gt;

&lt;p&gt;Below you&amp;rsquo;ll find a link to the &lt;a href=&#34;http://www.meetup.com/AngularJS-MTV/events/229520562/&#34;&gt;AngularJS Mountain View Meetup March meeting&lt;/a&gt; video which has several really great presentations. The feature presentation is AngularFire in Angular 2 by &lt;a href=&#34;https://twitter.com/jeffbcross&#34;&gt;Jeff Cross&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/_davideast&#34;&gt;David East&lt;/a&gt;. While riddled with sarcasm, the presentation is also riddled with great information on how to use AngularFire 2.&lt;/p&gt;

&lt;p&gt;Using the code samples from this presentation, I was able to create a authentication service in Ionic 2 that uses Google, Twitter and github social login. I&amp;rsquo;ll post information about that project in the coming weeks.&lt;/p&gt;

&lt;p&gt;AngularFire 2 is still in development and I haven&amp;rsquo;t used it for anything beyond social login so far. As always, &lt;a href=&#34;https://twitter.com/hashtag/EverythingIsInBeta?src=hash&#34;&gt;#EverythingIsInBeta&lt;/a&gt; so your mileage may vary.&lt;/p&gt;

&lt;p&gt;The AngularFire 2 presentation starts the 28 minute mark, but don&amp;rsquo;t be afraid to watch the entire set of presentations. I found the &amp;ldquo;How to create an Angular 2 app from scratch&amp;rdquo; presentation very valuable.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ngnSOTSS8Q8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
        </item>
      
    
      
        <item>
          <title>Rebooting &amp; Clearing the Cache of My Professional Life</title>
          <link>https://leifwells.github.io/2016/04/15/rebooting--clearing-the-cache-of-my-professional-life/</link>
          <pubDate>Fri, 15 Apr 2016 22:38:06 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/04/15/rebooting--clearing-the-cache-of-my-professional-life/</guid>
          <description>&lt;p&gt;Welcome to my new blog. I plan to write about many things here &amp;mdash;&amp;ndash; life, television, movies &amp;mdash;&amp;ndash; but I will be focusing a lot of my efforts around my work as a Web and mobile application developer.&lt;/p&gt;

&lt;p&gt;A lot has changed for me over the past few years. I went from being an RIA Evangelist at Roundbox (now defunct) to working at &lt;a href=&#34;http://www.measuredprogress.org/&#34;&gt;Measured Progress&lt;/a&gt; to freelancing and feeling fairly underemployed. I&amp;rsquo;ve done my best to learn new technologies &amp;mdash;&amp;ndash; &lt;a href=&#34;http://www.appcelerator.com/&#34;&gt;Appcelerator Titanium&lt;/a&gt;, &lt;a href=&#34;https://angularjs.org/&#34;&gt;Angular&lt;/a&gt;, &lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; &amp;mdash;&amp;ndash; whilst wrapping my head around the entire ecosystem that is modern Javascript. For a long while it was all overwhelming. It seemed like we were introduced to ten new frameworks or automation libraries or CSS pre-post-processors every day. I eventually learned (or, actually, re-learned) how to cut through the daily white noise and focus on things that mattered most to me.&lt;/p&gt;

&lt;p&gt;These days I am hard at work getting up-to-speed with the on-going development of &lt;a href=&#34;https://github.com/driftyco/ionic/blob/2.0/CHANGELOG.md&#34;&gt;Ionic 2&lt;/a&gt; and &lt;a href=&#34;https://github.com/angular/angular/blob/master/CHANGELOG.md&#34;&gt;Angular 2&lt;/a&gt;, both now in beta. That includes other projects like &lt;a href=&#34;https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md&#34;&gt;RxJS&lt;/a&gt;, &lt;a href=&#34;https://github.com/angular/zone.js/&#34;&gt;Zones.js&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;, and &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;. Those are the technologies I am really enjoying, so expect future posts on them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m no expert. I&amp;rsquo;m still learning. But that is what is so very exciting about these days; &lt;a href=&#34;https://twitter.com/hashtag/EverythingIsInBeta?src=hash&#34;&gt;#EverythingIsInBeta&lt;/a&gt;, including our skills. Not many people are expert at the new versions of these technologies. Learn along with me, if you&amp;rsquo;d like. Help me to learn if you can.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>About Me</title>
          <link>https://leifwells.github.io/2016/04/15/about-me/</link>
          <pubDate>Fri, 15 Apr 2016 15:58:34 EDT</pubDate>
          <author></author>
          <guid>https://leifwells.github.io/2016/04/15/about-me/</guid>
          <description>

&lt;p&gt;&lt;em&gt;This is a narrative of my professional life. If this is too long for your attention deprived mind, please visit &lt;a href=&#34;https://www.linkedin.com/in/leifwells&#34;&gt;my Linked In profile&lt;/a&gt;; but I am so very much more than my resume. &lt;a href=&#34;https://twitter.com/leifwells&#34;&gt;Follow me on Twitter&lt;/a&gt; but be warned, I tweet about a many different things, not just technology.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last Updated: 2016-04-16T18:40:00&lt;/p&gt;

&lt;h2 id=&#34;shadowboxes-the-beginning&#34;&gt;Shadowboxes: The Beginning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been a developer for more than 20 years. After months of stealing computer time at a local college to train myself in Macromedia Director, I was brought on to an interactive media team at IBM&amp;rsquo;s Eduquest to work on a children&amp;rsquo;s interactive CD-ROM story book based on Laura L. Seeley&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/The-Book-Shadowboxes-Story-ABCs/dp/0934601658&#34;&gt;The Book of Shadowboxes: A Story of the ABC&amp;rsquo;s&lt;/a&gt;. This valuable experience lead me to becoming Technical Director of the Window 3.1 version of Shadowboxes as well as for The 1994 IBM Interactive Annual Report. The annual report project was so massive that nearly killed me.&lt;/p&gt;

&lt;p&gt;After a brief stay at the Betty Ford Clinic for Interactive Developers I entered the wild world of freelancing. I was contracted to work for agencies and companies large and small including IBM (of course), UPS, Home Depot, and the CDC.&lt;/p&gt;

&lt;h2 id=&#34;the-atlanta-interactive-media-community&#34;&gt;The Atlanta Interactive Media Community&lt;/h2&gt;

&lt;p&gt;At this point I took the opportunity to lift my head and take a look around at the Atlanta development community. It basically didn&amp;rsquo;t exist. New companies were popping up everywhere, new interactive departments inside large corporations were forming. The Web was taking off in a big way. A very big way. But no one knew each other. There was so much work, companies weren&amp;rsquo;t even aware of other competing companies down the street.&lt;/p&gt;

&lt;p&gt;With a lot of assistance and insistence from friends, we put together a party at a studio which volunteered as host and invited the entire disconnected community. It was huge. Everyone came. Connections were made. People were hired. Companies were engaged. It was amazing. I truly enjoyed being able to help people get work and help people find workers.&lt;/p&gt;

&lt;h2 id=&#34;poorly-laid-plans&#34;&gt;Poorly Laid Plans&lt;/h2&gt;

&lt;p&gt;Later, while working with a company called Caribiner I met some gentlemen who shared the same views about creative and technical development as I. We decided to create a start-up. It was a disaster. Partially planning, partially timing, but completely disastrous.&lt;/p&gt;

&lt;p&gt;Then came 911 and everything else fell apart.&lt;/p&gt;

&lt;p&gt;In 2002, I joined Realm Communications (now &lt;a href=&#34;http://realmco.com/&#34;&gt;Realm Integrated Marketing&lt;/a&gt;) as their Technical Director working on CD-ROM and Web projects using Macromedia Director and Macromedia Flash.&lt;/p&gt;

&lt;h2 id=&#34;evangelist-at-roundbox&#34;&gt;Evangelist at Roundbox&lt;/h2&gt;

&lt;p&gt;In 2004 I began working with Roundbox Media as their Director of Multimedia Services. Roundbox was &amp;mdash;&amp;ndash; I use the past tense, as the company no longer exists &amp;mdash;&amp;ndash; a company that worked with clients in the educational field. We worked on various projects related to student assessments. At the same time I had taken over the management of the Atlanta Macromedia User Group (later to evolved as the Adobe User Group of Atlanta) as well as presenting at local user groups and conferences. I was building a name for myself in the rich Internet application space.&lt;/p&gt;

&lt;p&gt;Roundbox Media grew into Roundbox Global and the management team decided to create a new position for me as Rich Internet Application Evangelist. Basically, I was doing all the things I was already doing, but now I could do them during the workday without making any project managers crazy. We moved into a new office space which had a huge meeting area. We could easily host meeting for 200 people. It was a very supportive environment for me and my community.&lt;/p&gt;

&lt;h2 id=&#34;continuing-with-education-companies&#34;&gt;Continuing with Education Companies&lt;/h2&gt;

&lt;p&gt;After Roundbox Global was sold, I moved on to &lt;a href=&#34;http://www.measuredprogress.org/&#34;&gt;Measured Progress&lt;/a&gt;, another education company, as an Enterprise Architect. I worked on one large project which assisted teachers with creating student assessment questions. Later I assisted the Measured Progress UX team with creating prototypes for user testing, something I completely enjoyed.&lt;/p&gt;

&lt;p&gt;I was assigned to move to Boston and work at a company Measured Progress had just purchased. I made plans, handed off all of my community responsibilities, and prepared to leave Atlanta. But the plan didn&amp;rsquo;t pan out. Having lived in The South my entire life I was happy I didn&amp;rsquo;t have to find out what it was like living where Winter was a serious matter.&lt;/p&gt;

&lt;h2 id=&#34;freelancing-and-re-educating&#34;&gt;Freelancing and Re-educating&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve worked as a freelancer since leaving Measured Progress in 2012. I&amp;rsquo;ve especially enjoyed working with &lt;a href=&#34;http://www.digitalprimates.net/&#34;&gt;Digital Primates&lt;/a&gt; on a small Angular application and a massively huge Flex/Java application as well as working with &lt;a href=&#34;https://www.simb.co/&#34;&gt;Simb &amp;amp; Company&lt;/a&gt; on a few Angular micro sites. And in my spare time I&amp;rsquo;ve learned. And learned.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
